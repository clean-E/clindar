type User {
  email: String!
  nickname: String!
}

input UserEmail {
  email: String!
}

input GroupNameInput {
  gname: String!
}

type GroupName {
  gname: String!
}

type Where {
  place1: String!
  place2: String!
}

type When {
  year: String!
  month: String!
  date: String!
  startTime: String!
}

type Who {
  host: String!
  guest: [Guest]!
}

type GroupName {
  gname: String!
}

input WhereInput {
  place1: String!
  place2: String!
}

input WhenInput {
  year: String!
  month: String!
  date: String!
  startTime: String!
}

input WhoInput {
  host: String!
  guest: [GuestInput]!
}

type Schedule {
  _id: String!
  category: String!
  where: Where!
  when: When!
  who: Who!
  memo: String
  group: [GroupName]!
}

input CreateScheduleInput {
  email: String!
  category: String!
  where: WhereInput!
  when: WhenInput!
  who: WhoInput!
  memo: String
  group: [GroupNameInput]!
}

input DeleteScheduleInput {
  email: String!
  _id: String!
}

input EditScheduleInput {
  email: String!
  _id: String!
  category: String!
  where: WhereInput!
  when: WhenInput!
  who: WhoInput!
  memo: String
  group: [GroupNameInput]!
}

input InviteScheduleInput {
  email: String!
  _id: String!
  nickname: String!
}

input JoinScheduleInput {
  email: String!
  _id: String!
  nickname: String!
}

input EditRecordInput {
  email: String!
  _id: String!
  nickname: String!
  record: [RecordInput]!
}

input CreateGroupInput {
  email: String!
  gname: String!
  leader: String!
  createdAt: String!
  mainCategory: String!
  description: String!
  secret: Boolean!
  password: String
}

input JoinGroupInput {
  email: String!
  _id: String!
}

input LeaveGroupInput {
  email: String!
  _id: String!
}

input DeleteGroupInput {
  email: String!
  _id: String!
}

type Guest {
  nickname: String!
  record: [Record]!
}

type Record {
  level: String!
  count: Int!
}

input GuestInput {
  nickname: String!
  record: [RecordInput]!
}

input RecordInput {
  level: String!
  count: Int!
}

type Group {
  _id: String!
  gname: String!
  leader: String!
  createdAt: String!
  description: String!
  memberList: [String]!
  mainCategory: String!
  secret: Boolean!
}

type UserInfo {
  email: String!
  nickname: String!
  myGroupList: [GroupName]
}

input LoginInput {
  email: String!
  nickname: String!
}

input ScheduleId {
  _id: String!
}

input GroupId {
  _id: String!
}

input GroupPassword {
  _id: String!
  password: String!
}

input NicknameInput {
  email: String!
  nickname: String!
}

type Query {
  getAllSchedule(schedule: UserEmail): [Schedule]!
  getScheduleDetail(schedule: ScheduleId): Schedule
  getAllGroup: [Group]!
  getGroupDetail(group: GroupId): Group
  openSecretGroup(group: GroupPassword): Group
  getMyPage(user: UserEmail): UserInfo
}

type Mutation {
  login(user: LoginInput): User!
  setNickname(user: NicknameInput): User!

  createSchedule(schedule: CreateScheduleInput): Schedule!
  deleteSchedule(schedule: DeleteScheduleInput): String!
  editSchedule(schedule: EditScheduleInput): Schedule!
  inviteSchedule(schedule: InviteScheduleInput): Schedule!
  joinSchedule(schedule: JoinScheduleInput): Schedule!
  editRecord(schedule: EditRecordInput): Schedule!

  createGroup(group: CreateGroupInput): Group!
  joinGroup(group: JoinGroupInput): Group!
  leaveGroup(group: LeaveGroupInput): Group!
  deleteGroup(group: DeleteGroupInput): String!
}
